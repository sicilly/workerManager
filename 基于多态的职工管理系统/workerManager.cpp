#include"workerManager.h"

WorkerManager::WorkerManager()
{
	// 1. 文件不存在
	ifstream ifs;
	ifs.open(FILENAME, ios::in);  //读文件
	if (!ifs.is_open())
	{
		 cout << "文件不存在" << endl;
		//初始化属性
		this->m_EmpNum = 0;
		this->m_EmpArray = NULL;
		this->m_FileIsEmpty = true;
		ifs.close();
		return;
	}
	//2. 文件存在 但数据为空
	char ch;
	ifs >> ch;
	if (ifs.eof()) {
		cout << "文件为空" << endl;
		//初始化属性
		this->m_EmpNum = 0;
		this->m_EmpArray = NULL;
		this->m_FileIsEmpty = true;
		ifs.close();
		return;
	}

	//3. 当文件存在 且有数据
	int num = this->get_EmpNum();
	//cout << "职工人数为：" << num << endl;
	this->m_EmpNum = num;
	// 创建一个数组，容量为m_EmpNum
	this->m_EmpArray = new Worker * [this->m_EmpNum];
	// 将文件中的数据存到数组中
	this->init_Emp();

	//// 测试
	//for (int i = 0; i < this->m_EmpNum; i++)
	//{
	//	cout << this->m_EmpArray[i]->m_Id << " "
	//		<< this->m_EmpArray[i]->m_Name << " "
	//		<< this->m_EmpArray[i]->m_DeptId << endl;

	//}
	
}


// 展示菜单的实现
void WorkerManager::Show_Menu()
{
	cout << "********************************************" << endl;
	cout << "*********  欢迎使用职工管理系统！ **********" << endl;
	cout << "*************  0.退出管理程序  *************" << endl;
	cout << "*************  1.增加职工信息  *************" << endl;
	cout << "*************  2.显示职工信息  *************" << endl;
	cout << "*************  3.删除离职职工  *************" << endl;
	cout << "*************  4.修改职工信息  *************" << endl;
	cout << "*************  5.查找职工信息  *************" << endl;
	cout << "*************  6.按照编号排序  *************" << endl;
	cout << "*************  7.清空所有文档  *************" << endl;
	cout << "********************************************" << endl;
	cout << endl;
}

// 退出系统
void WorkerManager::ExitSystem()
{
	cout << "欢迎下次使用" << endl;
	system("pause");
	exit(0);
}

// 添加职工
void WorkerManager::Add_Emp()
{
	cout << "请输入添加职工数量" << endl;
	int addNum=0; // 保存用户输入的数量
	cin >> addNum;
	if (addNum > 0)
	{
		// 添加
		// 计算添加新空间大小
		int newSize = this->m_EmpNum + addNum;

		// 开辟新空间
		Worker** newSpace = new Worker* [newSize];

		// 将原来空间下数据，拷贝到新空间下
		if (this->m_EmpArray != NULL) 
		{
			for (int i = 0; i < this->m_EmpNum; i++)
			{
				newSpace[i] = this->m_EmpArray[i];
			}
		}

		// 批量添加新数据
		for (int i = 0; i < addNum; i++)
		{
			int id;  // 职工编号
			string name;  // 职工姓名
			int dSelect;  // 部门选择

			cout << "请输入第" << i + 1 << "个新职工编号：" << endl;
			cin >> id;

			cout << "请输入第" << i+1 <<"个新职工姓名：" << endl;
			cin >> name;

			cout << "请选择该职工岗位" << endl;
			cout << "1.普通员工" << endl;
			cout << "2.经理" << endl;
			cout << "3.老板" << endl;
			cin >> dSelect;

			Worker* worker = NULL; // 职工指针 默认指向空
			switch (dSelect)
			{
			case 1:
				worker = new Employee(id,name,1);
				break;
			case 2:
				worker = new Manager(id, name, 2);
				break;
			case 3:
				worker = new Boss(id, name, 3);
				break;
			default:
				break;
			}

			// 将创建的职工指针，保存到数组中
			newSpace[this->m_EmpNum + i] = worker;

		}

		// 释放原有空间
		delete[] this->m_EmpArray;
		// 更改新空间的指向
		this->m_EmpArray = newSpace;
		// 更新新的职工人数
		this->m_EmpNum = newSize;
		// 更新文件不为空的标志符
		this->m_FileIsEmpty = false;
		// 提示添加成功
		cout << "成功添加" << addNum<< "名新员工！"<< endl;

		// 保存数据到文件中
		this->save();

	}
	else {
		cout << "输入有误！" << endl;
	}

	system("pause");
	system("cls");
}

// 保存文件
void WorkerManager::save()
{
	ofstream ofs;
	ofs.open(FILENAME, ios::out); // 写文件
	for (int i = 0; i < this->m_EmpNum;i++) {
		ofs << this->m_EmpArray[i]->m_Id << " "
			<< this->m_EmpArray[i]->m_Name << " "
			<< this->m_EmpArray[i]->m_DeptId << " "
			<< endl;
	}
	// 关闭文件
	ofs.close();
}

// 统计文件中的人数
int WorkerManager::get_EmpNum()
{
	ifstream ifs;
	ifs.open(FILENAME, ios::in); // 读文件
	int id;
	string name;
	int dId;

	int num = 0;

	// 一行一行读
	while (ifs >> id && ifs >> name && ifs >> dId)
	{
		//统计人数变量
		num++;
	}
	return num;
}

// 初始化员工
void WorkerManager::init_Emp()
{
	ifstream ifs;
	ifs.open(FILENAME, ios::in);  // 读文件
	int id;
	string name;
	int dId;
	int index = 0;
	// 一行一行读
	while (ifs >> id && ifs >> name && ifs >> dId)
	{
		Worker* worker = NULL;
		if (dId == 1)  //普通员工
		{
			worker = new Employee(id,name,dId);
		}
		else if(dId==2)
		{
			worker = new Manager(id, name, dId);
		}
		else if (dId == 3)
		{
			worker = new Boss(id, name, dId);
		}
		this->m_EmpArray[index] = worker;
		index++;
	}
	// 关闭文件
	ifs.close();
}

// 显示员工
void WorkerManager::Show_Emp()
{
	// 判断文件是否为空
	if (this->m_FileIsEmpty)
	{
		cout << "文件不存在或记录为空！" << endl;
	}
	else
	{
		for (int i = 0; i < m_EmpNum; i++)
		{
			//利用多态调用程序接口
			this->m_EmpArray[i]->showInfo();
		}
	}
	system("pause");
	system("cls");
}

// 删除员工
void WorkerManager::Del_Emp() 
{
	if (this->m_FileIsEmpty)
	{
		cout << "文件不存在或记录为空！" << endl;
	}
	else {
		// 按照职工编号删除
		cout << "请输入想要删除职工编号：" << endl;
		int id = 0;
		cin >> id;

		int index = this->IsExist(id);
		if (index != -1)  // 职工存在并且要删除掉index位置的数据
		{
			//数据前移
			for (int i = index; i < this->m_EmpNum-1; i++)
			{
				this->m_EmpArray[i] = this->m_EmpArray[i + 1];
			}
			this->m_EmpNum--; // 更新数组中记录人员个数
			// 数据同步更新到文件中
			this->save();
			cout << "删除成功！" << endl;
		}
		else {
			cout << "未找到该职工，无法删除" << endl;
		}
	}
	system("pause");
	system("cls");
}

// 判断员工是否存在，如果存在返回职工所在数组中的位置，不存在返回-1
int WorkerManager::IsExist(int id) 
{
	int index = -1;
	for (int i = 0; i < this->m_EmpNum; i++)
	{
		if (this->m_EmpArray[i]->m_Id == id)
		{
			// 找到职工
			index = i;

			break;
		}
	}
	return index;
}

// 修改员工
void WorkerManager::Mod_Emp() 
{
	if (this->m_FileIsEmpty)
	{
		cout << "文件不存在或记录为空！" << endl;
	}
	else {
		// 按照职工编号修改
		cout << "请输入想要修改职工编号：" << endl;
		int id = 0;
		cin >> id;

		int ret = this->IsExist(id);
		if (ret != -1)  // 职工存在
		{
			// 查找到编号的职工
			delete this->m_EmpArray[ret];
			int newId = 0;
			string newName = "";
			int dSelect = 0;

			cout << "查到：" << id << "号员工，请输入新职工号：" << endl;
			cin >> newId;
			cout << "请输入新姓名：" << endl;
			cin >> newName;
			cout << "请选择新岗位：" << endl;
			cout << "1.普通员工" << endl;
			cout << "2.经理" << endl;
			cout << "3.老板" << endl;
			cin >> dSelect;

			Worker* worker = NULL; // 职工指针 默认指向空
			switch (dSelect)
			{
			case 1:
				worker = new Employee(newId, newName, 1);
				break;
			case 2:
				worker = new Manager(newId, newName, 2);
				break;
			case 3:
				worker = new Boss(newId, newName, 3);
				break;
			default:
				break;
			}
			// 更新数据到数组中
			this->m_EmpArray[ret] = worker;

			cout << "修改成功！" << endl;

			//保存到文件中
			this->save();
		}
		else {
			cout << "未找到该职工,无法修改" << endl;
		}
	}
	system("pause");
	system("cls");
}

// 查找员工
void WorkerManager::Find_Emp() 
{
	if (this->m_FileIsEmpty)
	{
		cout << "文件不存在或记录为空！" << endl;
	}
	else {
		cout << "请输入查找的方式：" << endl;
		cout << "1.按职工编号查找" << endl;
		cout << "2.按职工姓名查找" << endl;

		int select = 0;
		cin >> select;
		if (select == 1)  // 按编号查
		{
			cout << "请输入查找的职工编号：" << endl;
			int id = 0;
			cin >> id;

			int ret = this->IsExist(id);
			if (ret != -1)  // 找到职工
			{
				cout << "查找成功！该职工信息如下：" << endl;
				this->m_EmpArray[ret]->showInfo();
			}
			else {
				cout << "查无此人" << endl;
			}
		}
		else if (select == 2) {  //按姓名查
			cout << "请输入查找的职工姓名：" << endl;
			string name;
			cin >> name;

			// 加入是否查找到的标志 默认未找到
			bool flag = false;

			for (int i = 0; i < this->m_EmpNum; i++)
			{
				if (this->m_EmpArray[i]->m_Name == name)
				{
					flag = true; // 找到的标志
					cout << "查找成功！该职工信息如下：" << endl;
					this->m_EmpArray[i]->showInfo();
				}
			}
			if (flag==false) 
			{
				cout << "查无此人" << endl;
			}
		}
		else {
			cout << "输入选项有误，请重新输入" << endl;
		}
	}
	system("pause");
	system("cls");
}

// 按照编号排序
void WorkerManager::Sort_Emp() 
{
	if (this->m_FileIsEmpty)
	{
		cout << "文件不存在或记录为空！" << endl;
		system("pause");
		system("cls");
	}
	else {
		cout << "请选择排序的方式：" << endl;
		cout << "1.按职工编号升序" << endl;
		cout << "2.按职工编号降序" << endl;
		int select = 0;
		cin >> select;

		for (int i = 0; i < this->m_EmpNum; i++)
		{
			int minOrMax = i;  // 第一轮认定最小（大）值的下标是0，第二轮认定次小（大）值下标是1...
			for (int j = i+1; j < this->m_EmpNum; j++) 
			{
				if (select == 1)   // 升序
				{
					// 后面是否有更小的数
					if (this->m_EmpArray[minOrMax]->m_Id > this->m_EmpArray[j]->m_Id) 
					{
						minOrMax = j;  // 更新下标
					}
				}
				else  // 降序
				{
					// 后面是否有更大的数
					if (this->m_EmpArray[minOrMax]->m_Id < this->m_EmpArray[j]->m_Id)
					{
						minOrMax = j;  // 更新下标
					}
				}
			}

			//判断一开始认定的最小值或最大值 是不是 真正的最小值或最大值
			if (i != minOrMax) {
				// 交换元素
				Worker* temp = this->m_EmpArray[i];
				this->m_EmpArray[i] = this->m_EmpArray[minOrMax];
				this->m_EmpArray[minOrMax] = temp;
			}
		}
		cout << "排序成功！排序结果为：" << endl;

		// 保存到文件
		this->save();
		// 显示结果
		this->Show_Emp();
	}
}

// 清空文件
void WorkerManager::Clean_File() 
{
	cout << "确定清空？" << endl;
	cout << "1.确定" << endl;
	cout << "2.返回" << endl;

	int select = 0;
	cin >> select;

	if (select == 1)
	{
		ofstream ofs(FILENAME, ios::trunc);
		ofs.close();

		if (this->m_EmpArray != NULL)
		{
			// 删除堆区的每个职工对象
			for (int i = 0; i < this->m_EmpNum; i++)
			{
				delete this->m_EmpArray[i];
				this->m_EmpArray[i] = NULL;
			}

			// 删除堆区数组指针
			delete[] this->m_EmpArray;
			this->m_EmpArray = NULL;

			this->m_EmpNum = 0;
			this->m_FileIsEmpty = true;
		}

		cout << "清空成功！" << endl;
	}
	system("pause");
	system("cls");
}

// 析构函数
WorkerManager::~WorkerManager()
{
	//堆区数据手动释放
	if (this->m_EmpArray != NULL)
	{
		// 每一个元素置空
		for (int i = 0; i < this->m_EmpNum; i++)
		{
			if (this->m_EmpArray[i] != NULL)
			{
				delete this->m_EmpArray[i];
			}
		}
		// 数组置空
		delete[] this->m_EmpArray;
		this->m_EmpArray = NULL;
	}
}